name: 🚀 Deploy TCE Project

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Testes e Linting
  test:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔍 Run linting
      run: |
        pip install ruff
        ruff check . --exclude venv/ || true
        ruff format --check . --exclude venv/ || true

    - name: 🧪 Run basic tests
      run: |
        python -c "
        import sys
        sys.path.append('tce_back')
        sys.path.append('tce_front')

        # Test imports básicos
        try:
            from tce_back.etl_interface import get_progresso_por_tipo
            print('✅ ETL interface OK')
        except Exception as e:
            print(f'❌ ETL interface error: {e}')

        try:
            from tce_front.utils.database import query_db
            print('✅ Database utils OK')
        except Exception as e:
            print(f'❌ Database utils error: {e}')

        print('🎯 Basic tests completed')
        "

  # Build e Push das imagens Docker
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Build Backend
    - name: 🏗️ Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./tce_back/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Frontend
    - name: 🏗️ Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./tce_front/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy para Coolify
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Coolify
      run: |
        echo "🔄 Iniciando deploy para Coolify..."

        # Aqui você pode adicionar comandos para fazer deploy no Coolify
        # Por exemplo, usando a API do Coolify ou webhook

        echo "📦 Deploy package prepared:"
        echo "  - Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
        echo "  - Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest"
        echo "  - Docker Compose: ./docker-compose.yml"
        echo "  - Environment: ./.env.example"

        echo "✅ Deploy preparation completed"

        # Simulação do deploy (substitua pela sua lógica real)
        echo "🎯 Para deploy real:"
        echo "  1. Configure suas secrets no GitHub (COOLIFY_API_KEY, etc.)"
        echo "  2. Use a API do Coolify ou webhook para trigger"
        echo "  3. Ou faça deploy manual via Coolify dashboard"

  # Backup do banco (apenas em produção)
  backup:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🗄️ Database Backup
      run: |
        echo "💾 Criando backup do banco de dados..."
        echo "⚠️  Esta etapa requer configuração de acesso ao banco de produção"
        echo "📝 Configure as seguintes secrets:"
        echo "  - DB_HOST_PROD"
        echo "  - DB_PORT_PROD"
        echo "  - DB_NAME_PROD"
        echo "  - DB_USER_PROD"
        echo "  - DB_PASSWORD_PROD"
        echo ""
        echo "✅ Backup step configured (implementação pendente)"

  # Notificações
  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()

    steps:
    - name: 📢 Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deploy completed successfully!"
          echo "📊 Status: ✅ SUCCESS"
        elif [ "${{ needs.deploy.result }}" == "failure" ]; then
          echo "❌ Deploy failed!"
          echo "📊 Status: ❌ FAILURE"
        else
          echo "⚠️  Deploy status unknown"
          echo "📊 Status: ❓ UNKNOWN"
        fi

        echo ""
        echo "📈 Pipeline Summary:"
        echo "  Test: ${{ needs.test.result }}"
        echo "  Build: ${{ needs.build-and-push.result }}"
        echo "  Deploy: ${{ needs.deploy.result }}"
